#!/bin/bash
ffmpeg_alternative=ffmpeg

echo "" > commands.bash;

sleeptime="0.15";
function execute_comm {
    sleeptime="0.1";
    echo -e "\n\nExecute '$1'";
    sleep $sleeptime;
    echo "$1" >> commands.bash;
    sleep $sleeptime;
    echo "";
    eval "$1";
}

#Let's set CPU threads count
threads=$(grep -c ^processor /proc/cpuinfo); 
#echo $threads; 
threads=$((threads * 2 + 0)); 
echo $threads;

echo -n -e "Select video stabilization mode:\n9 - no video stabilization (just use some video filters)\n2 - smoothing=27 (default, good stabilization for mobile video)\n3 - smoothing=15 (good for movies)\n7 - smoothing=70 (if you want very very smooth video)\n8 - smoothing=180 (extremely smooth video)\n6 - smoothing=6 (good for smooth movies)\n0 - smoothing=0 (special vidstab mode)\n";
read case_value;
case ${case_value} in 
[9] | [9] ) smoothing="-1"; ;;
[2] | [2] ) smoothing=27; ;;
[3] | [3] ) smoothing=15; ;; 
[6] | [6] ) smoothing=6; ;; 
[7] | [7] ) smoothing=70; ;; 
[8] | [8] ) smoothing=180; ;; 
[0] | [0] ) smoothing=0; ;;
*) smoothing=27; ;; 
esac; 
echo -e "\nsmoothing = $smoothing\n";
sleep $sleeptime

echo -n -e "Select fps interpolation mode:\n0 - none (fastest, default)\n2 - dup (very fast)\n3 - blend,\n5 - motion interpolate (very slow, very smooth)\n"; 
read  fps_interpolation_mode; 
case ${fps_interpolation_mode} in 
[0] | [0] ) INTERPOL_MODE='none'; INTERPOL_COMM="";; 
[2] | [2] ) INTERPOL_MODE='dup'; ;; 
[3] | [3] ) INTERPOL_MODE='blend'; ;; 
[5] | [5] ) INTERPOL_MODE='mci'; ;; 
*) INTERPOL_MODE='none'; INTERPOL_COMM="" echo "Default=0" ;; 
esac; 
#echo -e "\nINTERPOL_MODE = $INTERPOL_MODE\n";
echo -e "\nFPS interpolation mode = $INTERPOL_MODE\n"; 
sleep $sleeptime;

#Ask target fps only if interpolation mode is not "none"
if [ "$INTERPOL_MODE" != "none" ]; 
then 
echo -n -e "Select target video fps:\n3 - 30 fps (default)\n6 - 60 fps\nPress 3 or 6: "; 
read  case_value; 
case ${case_value} in [3] | [30] ) 
fps=30; ;; 
[6] | [60] ) 
fps=60; ;; 
*) 
fps=30; 
echo " Default = $fps fps"; ;; 
esac; 
INTERPOL_COMM=",minterpolate=mi_mode=$INTERPOL_MODE:mc_mode=aobmc:me_mode=bidir:vsbmc=1:fps=$fps"
fi; 

#If interpolation mode == 'dup' - dublicate frames before stabilization, and do nothing after

if [ "$INTERPOL_MODE" == "dup" ]; 
then 
INTERPOL_COMM=""
INTERPOL_COMM_BEFORE=",minterpolate=mi_mode=$INTERPOL_MODE:mc_mode=aobmc:me_mode=bidir:vsbmc=1:fps=$fps"
fi; 

echo -e "\nTarget fps = $fps\n";


sleep $sleeptime;

echo -n -e "Select target file format:\n1 - mkv, matroska (default)\n4 - mp4\nPress 1 or 4: "; 
read  case_value; 
case ${case_value} in 
[1] | [1] ) file_format="mkv"; ;; 
[4] | [4] ) file_format="mp4"; ;; 
*) file_format="mkv"; echo " Default = $file_format"; ;; 
esac; 
echo -e "\nfile_format = $file_format\n"; 
sleep $sleeptime;

VERY_LOW_Q_PARAMS=' -c:a  aac  -b:a 128k -c:v libx264 -preset veryfast -crf 24 -profile:v baseline -level 3.0 -pix_fmt yuv420p'; 
LOW_Q_PARAMS=' -c:a  aac  -b:a 192k -c:v libx264 -preset veryfast -crf 18 -profile:v baseline -level 3.0 -pix_fmt yuv420p'; 
MID_Q_PARAMS=' -acodec copy -c:v libx264 -preset veryfast -crf 12 -profile:v baseline -level 3.0 -pix_fmt yuv420p'; 
HI_Q_PARAMS=' -acodec copy  -vcodec libx264 -preset veryfast -crf 9 -profile:v high444 -pix_fmt yuv444p '; 
echo -n -e "\n\nSelect h264 video encode settings:\n0 - Very low quality (for small file size '$VERY_LOW_Q_PARAMS')\n\n\n1 - low quality (good for mobile, default '$LOW_Q_PARAMS')\n\n3 - mid quality ($MID_Q_PARAMS)\n\n5 - high quality (bigger size, low compatibility with mobile devices '$HI_Q_PARAMS')\n\nPress 1 or 5: "; 
read  case_value; 
case ${case_value} in 
[0] | [0] ) VIDEO_PARAMS=${VERY_LOW_Q_PARAMS}; ;; 
[1] | [1] ) VIDEO_PARAMS=${LOW_Q_PARAMS}; ;; 
[3] | [3] ) VIDEO_PARAMS=${MID_Q_PARAMS}; ;; 
[5] | [5] ) VIDEO_PARAMS=${HI_Q_PARAMS}; ;; 
*) VIDEO_PARAMS=${LOW_Q_PARAMS}; 
echo " Default = $VIDEO_PARAMS"; ;; 
esac; 
echo -e "\nVIDEO_PARAMS = $VIDEO_PARAMS\n"; 

#command to deinterlace video
DEINTERLACE_COMM=",yadif";
DEINTERLACE_COMM=",yadif=1";
DEINTERLACE_COMM="";

for i in *.{mod,MOD,mts,MTS,TS,ts,avi,AVI,3gp,3GP,mov,MOV,mp4,MP4,mkv,MKV}; 
do echo "$i";
execute_comm " ";
execute_comm " ";
execute_comm "### $i ###"
#if input file does't exist - continue with next file
[ ! -s "$i" ] && continue;

DIR='norm'; 
mkdir -p "norm"; 
#ffmpeg -threads $threads -hide_banner -n -i "$i" -filter "loudnorm=I=-10" -acodec pcm_s32le "norm*}.wav"; DIR='vidstab'; 
FFCOMMAND=$(echo "ffmpeg -threads $threads -hide_banner -n -i \"$i\" -filter \"loudnorm=I=-9:dual_mono=true,aresample=48000\" -acodec pcm_s32le \"norm/${i%.*}.wav\"; "); 
execute_comm "$FFCOMMAND";

MAP_COMM=' -map 0:v  ';

DIR='vidstab'; 

#calculate map id for next stream
next_map_id=1;

echo "Generate forced subtitles with name of file"
echo "1" > "norm/${i%.*}-name.srt"
echo "00:00:00,350 --> 00:00:4,000" >> "norm/${i%.*}-name.srt"
echo "${i%.*}" >> "norm/${i%.*}-name.srt"
if [ -s "norm/${i%.*}-name.srt" ]; 
then 
    MUX_FORCED_SUBTITLES_COMM=" -i \"norm/${i%.*}-name.srt\"  ";
    MAP_COMM=" $MAP_COMM -map $next_map_id:s -disposition:s:s:$next_map_id forced ";
    next_map_id=$((next_map_id + 1));  #calculate map id for next stream
else 
    echo -e "norm/${i%.*}-name.srt file does not exist, or is empty \n"; 
    MUX_FORCED_SUBTITLES_COMM=" ";
fi; 


#change mux part of ffmpeg command, depends of file with normalize sound
if [ -s "norm/${i%.*}.wav" ]; 
then 
    echo -e "norm/${i%.*}.wav file exists and is not empty \n"; 
    MUX_SOUND_COMM=" -i \"norm/${i%.*}.wav\" ";
    MAP_COMM=" $MAP_COMM  -map $next_map_id:a ";
    next_map_id=$((next_map_id + 1));  #calculate map id for next stream
    #next_map_id = 2

    #subtitles auto generation (if file not exists)
    if [ ! -s "norm/${i%.*}.srt" ]; 
    then 
        timeout 7200 autosub --format srt --src-language ru --dst-language ru "norm/${i%.*}.wav"
        #autosub --format srt --src-language en --dst-language en "norm/${i%.*}.wav"
    fi; 
    
    if [ -s "norm/${i%.*}.srt" ]; 
    then 
        MUX_SUBTITLES_COMM=" -i \"norm/${i%.*}.srt\"  ";
        MAP_COMM=" $MAP_COMM -map $next_map_id:s ";
        next_map_id=$((next_map_id + 1));  #calculate map id for next stream
        #next_map_id ~ 3
    else 
        echo -e "norm/${i%.*}.srt file does not exist, or is empty \n"; 
        MUX_SUBTITLES_COMM=" ";
    fi; 
else 
    echo -e "norm/${i%.*}.wav file does not exist, or is empty \n"; 
    MUX_SOUND_COMM=" ";
fi; 


#Need video stabilization?
if [ ! $smoothing == "-1" ]; 
then 
    if [ -s "${i%.*}.trf" ]; 
    then 
    echo "${i%.*}.trf file exists and is not empty "; 
    else 
    echo "${i%.*}.trf file does not exist, or is empty "; 
    echo "$i"; 
    date; 
    #mincontrast=0.09:
    #mincontrast=0.15:
    FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"$i\" -an -max_muxing_queue_size 6144 -vf null${DEINTERLACE_COMM}${INTERPOL_COMM_BEFORE},vidstabdetect=shakiness=10:mincontrast=0.15:accuracy=15:result=\"${i%.*}.trf\":show=0 -f null -;"); 
    #echo $FFCOMMAND;
    #eval "$FFCOMMAND"
    execute_comm "$FFCOMMAND"
    fi; 
    #Second step video stab filter command
    VIDEOSTAB2STEP_COMM=",vidstabtransform=smoothing=$smoothing:crop=keep:optzoom=0:zoom=0:zoomspeed=1:interpol=bicubic:debug=0:maxangle=0.5:input=\"${i%.*}.trf\"";
else 
#Don't need video stabilization, skip this step
VIDEOSTAB2STEP_COMM=""; #Set second step video stab filter command to empty string
fi; 

if [ ! true ]; 
then 
    thumbnaildir='thumbnails';
    echo "Create thumbnail";
    mkdir -p $thumbnaildir;
    FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"$i\" -max_muxing_queue_size 6144 -vf thumbnail=n=300,scale=1920x1080,pp=ac/al\|fullyrange/dr/ha/va,normalize=blackpt=black:whitept=white:independence=1,unsharp -frames:v 1 -qscale:v 0 \"$thumbnaildir/${i%.*}-img.png\"; ");
    sleep $sleeptime;
    execute_comm "$FFCOMMAND";

    echo "Create text with file name \"$i\"";
    #convert -antialias -background transparent -fill black -strokewidth 20 -stroke white -size 2880x1620 -gravity Center caption:"$i" -resize 1920x1080 "text4video.png"; 
    FFCOMMAND=$(echo "convert -antialias -background transparent -fill black -strokewidth 7 -stroke white -size 3840x2160 -gravity Center caption:\"${i%.*}\" -resize 1920x1080 \"$thumbnaildir/${i%.*}-text.png\"; ");
    sleep $sleeptime;
    execute_comm "$FFCOMMAND";

    echo "Compose text with the background";
    sleep 0.2;
    #composite -quality 100  "text4video.png" "text4videofractalbackground.png" "text4video.png"; 
    FFCOMMAND=$(echo "composite -quality 100 \"$thumbnaildir/${i%.*}-text.png\" \"$thumbnaildir/${i%.*}-img.png\" \"$thumbnaildir/${i%.*}-all.png\" ");
    sleep $sleeptime;
    execute_comm "$FFCOMMAND";

    FFCOMMAND=$(echo "convert -quality 100 -auto-level \"$thumbnaildir/${i%.*}-all.png\" \"$thumbnaildir/${i%.*}-all.jpg\"; ");
    sleep $sleeptime;
    execute_comm "$FFCOMMAND";

    if [ -s "$thumbnaildir/${i%.*}-all.jpg" ]; 
    then 
        MUX_PIC_COMM=" -i \"$thumbnaildir/${i%.*}-all.jpg\"  ";
        MAP_COMM=" $MAP_COMM -map $next_map_id -c:v:$next_map_id mjpeg -disposition:$next_map_id attached_pic ";
        next_map_id=$((next_map_id + 1));  #calculate map id for next stream
        #next_map_id ~ 4
    else 
        echo -e "$thumbnaildir/${i%.*}-all.jpg file does not exist, or is empty \n"; 
        MUX_PIC_COMM=" ";
    fi; 
fi; 




#FFCOMMAND=$(echo "composite -auto-level -quality 100 \"$thumbnaildir/${i%.*}-text.png\" \"$thumbnaildir/${i%.*}-img.png\" \"$thumbnaildir/${i%.*}-all.png\" ");
#sleep $sleeptime;
#execute_comm "$FFCOMMAND";
# convert "$i" -quality 63 -antialias -resize 786432@ -auto-level -auto-orient -pointsize 20 -font Helvetica -fill white -draw "text 10,20 Borodin-Atamanov.ru" web/"$i"; done


DIR='ready';
mkdir -p $DIR;
#old hqdn3d=4.0:3.0:6.0:4.5
#pp=ac
#pp=default/tmpnoise|1|2|3
#autolevels:fullyrange  autolevels[:f/fullyrange   
#pp=tmpnoise\|7\|14\|21/ha/va/al\|fullyrange/ha/va
#colorlevels=romin=0.17:gomin=0.17:bomin=0.17,
#colorlevels=romin=0.47:gomin=0.47:bomin=0.47,
#,pp=ac/al\|fullyrange/dr/ha/va,normalize=blackpt=black:whitept=white:smoothing=7:independence=0.7
#atadenoise=s=5,
#FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"$i\" ${MUX_FORCED_SUBTITLES_COMM} ${MUX_SOUND_COMM} ${MUX_SUBTITLES_COMM} ${MUX_PIC_COMM}  ${MAP_COMM} -max_muxing_queue_size 4096  -vf null${DEINTERLACE_COMM}${INTERPOL_COMM_BEFORE}${VIDEOSTAB2STEP_COMM},pp=ac/al\|fullyrange/dr/ha/va,normalize=blackpt=black:whitept=white:smoothing=15:independence=0,eq=gamma=1.0${INTERPOL_COMM} $VIDEO_PARAMS    -movflags  +faststart  -metadata title=\"${i%.*}\" -map_metadata 0 \"$DIR/${i%.*}.mkv\"; ");
FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"$i\" ${MUX_FORCED_SUBTITLES_COMM} ${MUX_SOUND_COMM} ${MUX_SUBTITLES_COMM} ${MUX_PIC_COMM}  ${MAP_COMM} -max_muxing_queue_size 6144  -vf null${DEINTERLACE_COMM}${INTERPOL_COMM_BEFORE}${VIDEOSTAB2STEP_COMM},pp=ac/dr/ha/va,unsharp,null${INTERPOL_COMM} $VIDEO_PARAMS    -movflags  +faststart  -metadata title=\"${i%.*}\" -map_metadata 0 \"$DIR/${i%.*}.mkv\"; ");
#echo $FFCOMMAND;
sleep $sleeptime;
#exit;
execute_comm "$FFCOMMAND";
#eval "$FFCOMMAND"

#if $file_format is not mkv - copy video to new file, and delete mkv-file
if [ "$file_format" != "mkv" ]; 
then 
    FFCOMMAND=$(echo "ffmpeg -threads $threads -hide_banner -y -i \"$DIR/${i%.*}.mkv\" -c:all copy -c:a copy -c:v copy -map 0:v? -map 0:a? -map 0:s?  -map 0:d?  -map 0:t? -map_metadata 0 -c:s mov_text -movflags +faststart -metadata title=\"${i%.*}\" -disposition:s:s forced   \"$DIR/${i%.*}.$file_format\"; ");
    sleep $sleeptime;
    execute_comm "$FFCOMMAND";
    #if file in target format exists - delete temporary mkv-file
    [ -s "$DIR/${i%.*}.$file_format" ] && rm "$DIR/${i%.*}.mkv";
fi; 

#if output file exists - remove input file from input dir to computed dir
#\"$DIR/${i%.*}.$file_format\"
computed_dir='computed';
if [ -s "$DIR/${i%.*}.$file_format" ]; 
then
    echo -e "$DIR/${i%.*}.$file_format file exists and is not empty. Move input file to computed dir \n"; 
    mkdir -pv "${computed_dir}";
    mv -v "${i}" "${computed_dir}/${i}";
    mv -v "${i%.*}.trf" "${computed_dir}/${i%.*}.trf";
else
    echo -e "$DIR/${i%.*}.$file_format file does not exist, or is empty! \nWill not move input file to computed dir! \nSomethintg went wrong!\n"; 
    MUX_SOUND_COMM=" ";
fi;

echo -e "\n\n\n\n\n\n\n\n\n";

done;



