#!/bin/bash
#Script converts dictophone records. Normalize sound, makes speech to text recognize
ffmpeg_alternative=/home/i/bin/ffmpeg/ffmpeg

#echo "" > commands.bash;

sleeptime="0.15";
function execute_comm {
    sleeptime="0.1";
    echo -e "\n\nExecute '$1'";
    sleep $sleeptime;
    echo "$1" >> commands.bash;
    sleep $sleeptime;
    echo "";
    eval "$1";
}

#Let's set CPU threads count
threads=$(grep -c ^processor /proc/cpuinfo); 
#echo $threads; 
threads=$((threads * 2 + 0)); 
echo $threads;
sleep 0.1;

rm -v "commands.bash";

for i in *.*; 
do echo "$i";

DIR='left-right';
mkdir -pv "${DIR}";
sleep 0.1;
rm -v "${DIR}/*";
sleep 0.1;

echo "Save to wav [$i]";
sleep 0.1;
FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"$i\" -ac 2 -vn -sn -movflags  +faststart -metadata title=\"${i%.*}\" -map_metadata 0 -acodec pcm_s32le \"${DIR}/orig.wav\"; ");
execute_comm "$FFCOMMAND";

echo "Create first subtitles [$i]"
FFCOMMAND=$(echo "timeout 7200 autosub --format srt --src-language ru --dst-language ru \"${DIR}/orig.wav\"");
#execute_comm "$FFCOMMAND";
#if subtitles auto generation file not exists - create it with name of current file
if [ ! -s "${DIR}/orig.srt" ]; 
then 
    echo "1" >> "${DIR}/orig.srt";
    echo "00:00:00,001 --> 00:00:00,013" >> "${DIR}/orig.srt";
    echo "${i%.*}" >> "${DIR}/orig.srt";
fi; 
FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"${DIR}/orig.srt\"  \"${DIR}/orig.lrc\"; ");
execute_comm "$FFCOMMAND";

echo "Save right and left channels to separate files [$i]";
#ffmpeg -i stereo.mp3 -map_channel 0.0.0 left.wav -map_channel 0.0.1 right.wav
#FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"$i\" -vn -sn -movflags  +faststart  -metadata title=\"${i%.*}\" -map_metadata 0 -map_channel 0.0.0 -af \"loudnorm=I=-9:dual_mono=true:print_format=summary\" -ar 48000 -acodec pcm_s32le \"${DIR}/left.wav\" -map_channel 0.0.1? -af \"loudnorm=I=-9:dual_mono=true:print_format=summary\" -ar 48000 -acodec pcm_s32le  \"${DIR}/right.wav\" ; ");
#FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"$i\" -vn -sn -movflags  +faststart -metadata title=\"${i%.*}\" -map_metadata 0 -map_channel 0.0.0 -acodec pcm_s32le \"${DIR}/left.wav\" -map_channel 0.0.1? -acodec pcm_s32le  \"${DIR}/right.wav\" ; ");
FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"${DIR}/orig.wav\" -vn -sn -movflags  +faststart -metadata title=\"${i%.*}\" -map_metadata 0 -map_channel 0.0.0 -acodec pcm_s32le \"${DIR}/left.wav\" -map_channel 0.0.1? -acodec pcm_s32le  \"${DIR}/right.wav\" ; ");
execute_comm "$FFCOMMAND";

#Is left and right equal? Let's check md5 sum
echo "Is left and right equal? Let's check MD5 sum"
#${i:0:4}-
md5left=$(md5sum -b "${DIR}/left.wav");
md5right=$(md5sum -b "${DIR}/right.wav");
md5left="${md5left:0:32}";
md5right="${md5right:0:32}";
echo "$md5left $md5right";

if [ "$md5left" == "$md5right" ]; then
    echo "Left and right are equal. This is mono."
    AC=1;
else
    echo "Left and right are not equal. This is stereo."
    AC=2;
fi

#if left audio file exist - normalize it
if [ -s "${DIR}/left.wav" ]; 
then 
    FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"${DIR}/left.wav\" -vn -sn -movflags  +faststart -metadata title=\"${i%.*}\" -map_metadata 0 -acodec pcm_s32le -af \"loudnorm=I=-9:dual_mono=true:print_format=summary\" -ar 48000 \"${DIR}/left-norm.wav\" ; ");
    execute_comm "$FFCOMMAND";
fi;

if [ "$AC" == 1 ]; 
then 
    echo "AC=1. This is mono. We don't need to normalize second channel. One channel is enough";
fi;

#if right audio file exist - normalize it
if [ -s "${DIR}/right.wav" ] && [ "$AC" == 2 ]; 
then 
    FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"${DIR}/right.wav\" -vn -sn -movflags  +faststart -metadata title=\"${i%.*}\" -map_metadata 0 -acodec pcm_s32le -af \"loudnorm=I=-9:dual_mono=true:print_format=summary\" -ar 48000 \"${DIR}/right-norm.wav\" ; ");
    execute_comm "$FFCOMMAND";
fi;


READYDIR='ready';
mkdir -pv "${READYDIR}";

if [ "$AC" == 2 ]; 
then 
    sleep 0.1;
    echo "AC=2. This is stereo. ";
    sleep 0.1;
    echo "Merge two mono files to one stereo file [$i]"
    FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"${DIR}/left-norm.wav\" -i \"${DIR}/right-norm.wav\" -filter_complex \"[0:a][1:a]amerge=inputs=2[aout]\" -map \"[aout]\" -acodec pcm_s32le \"${DIR}/norm-stereo.wav\"; ");
    execute_comm "$FFCOMMAND";
else
    echo "AC=1. This is mono. One channel is enough. Just rename file";    
    FFCOMMAND=$(echo "mv -v \"${DIR}/left-norm.wav\" \"${DIR}/norm-stereo.wav\"; ");
    execute_comm "$FFCOMMAND";
fi;


sleep 0.1;
echo "Create subtitles [$i]"
sleep 0.1;
FFCOMMAND=$(echo "timeout 7200 autosub --format srt --src-language ru --dst-language ru \"${DIR}/norm-stereo.wav\"");
execute_comm "$FFCOMMAND";
#if subtitles auto generation file not exists - create it with name of current file
if [ ! -s "${DIR}/norm-stereo.srt" ]; 
then 
    echo "1" >> "${DIR}/norm-stereo.srt";
    echo "00:00:00,001 --> 00:00:00,013" >> "${DIR}/norm-stereo.srt";
    echo "${i%.*}" >> "${DIR}/norm-stereo.srt";
fi; 
FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"${DIR}/norm-stereo.srt\"  \"${DIR}/norm-stereo.lrc\"; ");
execute_comm "$FFCOMMAND";

#FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"${READYDIR}/${i%.*}.wav\"  -metadata lyrics=\"lyrics I want\" -c:a aac -b:a 128k -ar 48000  \"${READYDIR}/${i%.*}.m4a\"; ");
lyrics=`cat "${DIR}/norm-stereo.lrc"`
echo ${lyrics};
sleep 0.1;
echo "Convert to aac in m4a container [$i]"
sleep 0.1;
FFCOMMAND=$(echo "$ffmpeg_alternative -threads $threads -hide_banner -y -i \"${DIR}/norm-stereo.wav\"  -i \"${DIR}/norm-stereo.srt\"  -i \"${DIR}/orig.srt\" -metadata lyrics=\"${lyrics}\"  -metadata comment=\"${lyrics}\"  -metadata title=\" \" -metadata author=\" \" -map 0:a -map 1:s -map 2:s  -c:a aac -b:a 128k -ar 48000 -movflags +faststart -vn -c:s mov_text \"${READYDIR}/${i%.*}.mp4\"; ");
execute_comm "$FFCOMMAND";
sleep 0.1;
mv --verbose "${READYDIR}/${i%.*}.mp4" "${READYDIR}/${i%.*}.m4a";
sleep 0.1;
cp --verbose "${DIR}/norm-stereo.srt" "${READYDIR}/${i%.*}.srt"
sleep 0.1;
cp --verbose "${DIR}/norm-stereo.lrc" "${READYDIR}/${i%.*}.lrc"
sleep 0.1;
cp --verbose "${DIR}/orig.srt" "${READYDIR}/${i%.*}-orig.srt"
sleep 0.1;
cp --verbose "${DIR}/orig.lrc" "${READYDIR}/${i%.*}-orig.lrc"
sleep 0.1;

echo "Deleting temp files [$i]"
sleep 4;
rm -rfv "${DIR}";

done;

exit;
